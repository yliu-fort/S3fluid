# %%
import numpy as np
from scipy.spatial import Delaunay, minkowski_distance
import meshio
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from mesh import Mesh
import scipy.sparse.linalg as spla
from icosphere import icosphere
from geometry import project_vector_to_plane

# %%
points = np.array([[1, 0, 0], [0, 0, 1], [0, 1, 0]])
point_normals = np.array([[1.0, 1.0, 1.0]]*3)
point_normals /= np.linalg.norm(point_normals,axis=-1,keepdims=True)
simplices = [[0,1,2]]
print(len(simplices))
mesh = Mesh(points, simplices, point_normals)
print(mesh.print_members())

# %%
# Setup for a 3D plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot each simplex
for simplex in simplices:
    polygon = points[simplex]
    ax.add_collection3d(Poly3DCollection([polygon], facecolors='grey', linewidths=1, edgecolors='k', alpha=.1))

# Set plot display parameters
ax.scatter(points[:,0], points[:,1], points[:,2], color='k')  # Plot the points
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# Adjusting the scale for better visualization
max_range = np.array([points[:,0].max()-points[:,0].min(), 
                    points[:,1].max()-points[:,1].min(), 
                    points[:,2].max()-points[:,2].min()]).max() / 2.0
mid_x = (points[:,0].max()+points[:,0].min()) * 0.5
mid_y = (points[:,1].max()+points[:,1].min()) * 0.5
mid_z = (points[:,2].max()+points[:,2].min()) * 0.5
ax.set_xlim(mid_x - max_range, mid_x + max_range)
ax.set_ylim(mid_y - max_range, mid_y + max_range)
ax.set_zlim(mid_z - max_range, mid_z + max_range)

# Draw cell normal

# Draw edge transform matrix
# Plot each vector
for face_idx in range(len(mesh.edge_lengths)):
    ax.quiver(*(mesh.edge_centers[face_idx]), *(mesh.edge_tangents[face_idx]), color='red', label='Tangent', length=0.2)
    ax.quiver(*(mesh.edge_centers[face_idx]), *(mesh.edge_bitangents[face_idx]), color='green', label='Bitangent', length=0.2)
    ax.quiver(*(mesh.edge_centers[face_idx]), *(mesh.edge_normals[face_idx]), color='blue', label='Normal', length=0.2)

# Draw point normals
# Plot each vector
for point_idx in range(len(mesh.points)):
    ax.quiver(*(mesh.points[point_idx]), *(mesh.point_normals[point_idx]), color='black', label='Tangent', length=0.2)

plt.show()


